/*
Copyright 2022 ByteDance and its affiliates.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubewharf/kubegateway/pkg/apis/proxy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UpstreamClusterLister helps list UpstreamClusters.
type UpstreamClusterLister interface {
	// List lists all UpstreamClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.UpstreamCluster, err error)
	// Get retrieves the UpstreamCluster from the index for a given name.
	Get(name string) (*v1alpha1.UpstreamCluster, error)
	UpstreamClusterListerExpansion
}

// upstreamClusterLister implements the UpstreamClusterLister interface.
type upstreamClusterLister struct {
	indexer cache.Indexer
}

// NewUpstreamClusterLister returns a new UpstreamClusterLister.
func NewUpstreamClusterLister(indexer cache.Indexer) UpstreamClusterLister {
	return &upstreamClusterLister{indexer: indexer}
}

// List lists all UpstreamClusters in the indexer.
func (s *upstreamClusterLister) List(selector labels.Selector) (ret []*v1alpha1.UpstreamCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UpstreamCluster))
	})
	return ret, err
}

// Get retrieves the UpstreamCluster from the index for a given name.
func (s *upstreamClusterLister) Get(name string) (*v1alpha1.UpstreamCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("upstreamcluster"), name)
	}
	return obj.(*v1alpha1.UpstreamCluster), nil
}
